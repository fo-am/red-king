# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_redking', [dirname(__file__)])
        except ImportError:
            import _redking
            return _redking
        if fp is not None:
            try:
                _mod = imp.load_module('_redking', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _redking = swig_import_helper()
    del swig_import_helper
else:
    import _redking
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class model_cost_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, model_cost_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, model_cost_params, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _redking.new_model_cost_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["amin"] = _redking.model_cost_params_amin_set
    __swig_getmethods__["amin"] = _redking.model_cost_params_amin_get
    if _newclass:amin = _swig_property(_redking.model_cost_params_amin_get, _redking.model_cost_params_amin_set)
    __swig_setmethods__["amax"] = _redking.model_cost_params_amax_set
    __swig_getmethods__["amax"] = _redking.model_cost_params_amax_get
    if _newclass:amax = _swig_property(_redking.model_cost_params_amax_get, _redking.model_cost_params_amax_set)
    __swig_setmethods__["umin"] = _redking.model_cost_params_umin_set
    __swig_getmethods__["umin"] = _redking.model_cost_params_umin_get
    if _newclass:umin = _swig_property(_redking.model_cost_params_umin_get, _redking.model_cost_params_umin_set)
    __swig_setmethods__["umax"] = _redking.model_cost_params_umax_set
    __swig_getmethods__["umax"] = _redking.model_cost_params_umax_get
    if _newclass:umax = _swig_property(_redking.model_cost_params_umax_get, _redking.model_cost_params_umax_set)
    __swig_setmethods__["a_p"] = _redking.model_cost_params_a_p_set
    __swig_getmethods__["a_p"] = _redking.model_cost_params_a_p_get
    if _newclass:a_p = _swig_property(_redking.model_cost_params_a_p_get, _redking.model_cost_params_a_p_set)
    __swig_setmethods__["betmin"] = _redking.model_cost_params_betmin_set
    __swig_getmethods__["betmin"] = _redking.model_cost_params_betmin_get
    if _newclass:betmin = _swig_property(_redking.model_cost_params_betmin_get, _redking.model_cost_params_betmin_set)
    __swig_setmethods__["bemaxtime"] = _redking.model_cost_params_bemaxtime_set
    __swig_getmethods__["bemaxtime"] = _redking.model_cost_params_bemaxtime_get
    if _newclass:bemaxtime = _swig_property(_redking.model_cost_params_bemaxtime_get, _redking.model_cost_params_bemaxtime_set)
    __swig_setmethods__["vmin"] = _redking.model_cost_params_vmin_set
    __swig_getmethods__["vmin"] = _redking.model_cost_params_vmin_get
    if _newclass:vmin = _swig_property(_redking.model_cost_params_vmin_get, _redking.model_cost_params_vmin_set)
    __swig_setmethods__["vmax"] = _redking.model_cost_params_vmax_set
    __swig_getmethods__["vmax"] = _redking.model_cost_params_vmax_get
    if _newclass:vmax = _swig_property(_redking.model_cost_params_vmax_get, _redking.model_cost_params_vmax_set)
    __swig_setmethods__["beta_p"] = _redking.model_cost_params_beta_p_set
    __swig_getmethods__["beta_p"] = _redking.model_cost_params_beta_p_get
    if _newclass:beta_p = _swig_property(_redking.model_cost_params_beta_p_get, _redking.model_cost_params_beta_p_set)
    __swig_setmethods__["g"] = _redking.model_cost_params_g_set
    __swig_getmethods__["g"] = _redking.model_cost_params_g_get
    if _newclass:g = _swig_property(_redking.model_cost_params_g_get, _redking.model_cost_params_g_set)
    __swig_setmethods__["h"] = _redking.model_cost_params_h_set
    __swig_getmethods__["h"] = _redking.model_cost_params_h_get
    if _newclass:h = _swig_property(_redking.model_cost_params_h_get, _redking.model_cost_params_h_set)
    def _print(self): return _redking.model_cost_params__print(self)
    __swig_destroy__ = _redking.delete_model_cost_params
    __del__ = lambda self : None;
model_cost_params_swigregister = _redking.model_cost_params_swigregister
model_cost_params_swigregister(model_cost_params)

class model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, model, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _redking.new_model()
        try: self.this.append(this)
        except: self.this = this
    def init(self): return _redking.model_init(self)
    def step(self): return _redking.model_step(self)
    def set_model(self, *args): return _redking.model_set_model(self, *args)
    def get_hosts(self): return _redking.model_get_hosts(self)
    def get_parasites(self): return _redking.model_get_parasites(self)
    def get_host_cost(self): return _redking.model_get_host_cost(self)
    def get_parasite_cost(self): return _redking.model_get_parasite_cost(self)
    def get_matrix(self): return _redking.model_get_matrix(self)
    def get_matrix_row(self, *args): return _redking.model_get_matrix_row(self, *args)
    def size(self): return _redking.model_size(self)
    __swig_setmethods__["m_cost_params"] = _redking.model_m_cost_params_set
    __swig_getmethods__["m_cost_params"] = _redking.model_m_cost_params_get
    if _newclass:m_cost_params = _swig_property(_redking.model_m_cost_params_get, _redking.model_m_cost_params_set)
    def update_cost_functions(self): return _redking.model_update_cost_functions(self)
    __swig_setmethods__["m_hstart"] = _redking.model_m_hstart_set
    __swig_getmethods__["m_hstart"] = _redking.model_m_hstart_get
    if _newclass:m_hstart = _swig_property(_redking.model_m_hstart_get, _redking.model_m_hstart_set)
    __swig_setmethods__["m_pstart"] = _redking.model_m_pstart_set
    __swig_getmethods__["m_pstart"] = _redking.model_m_pstart_get
    if _newclass:m_pstart = _swig_property(_redking.model_m_pstart_get, _redking.model_m_pstart_set)
    __swig_destroy__ = _redking.delete_model
    __del__ = lambda self : None;
model_swigregister = _redking.model_swigregister
model_swigregister(model)


def new_rk_real(*args):
  return _redking.new_rk_real(*args)
new_rk_real = _redking.new_rk_real

def delete_rk_real(*args):
  return _redking.delete_rk_real(*args)
delete_rk_real = _redking.delete_rk_real

def rk_real_getitem(*args):
  return _redking.rk_real_getitem(*args)
rk_real_getitem = _redking.rk_real_getitem

def rk_real_setitem(*args):
  return _redking.rk_real_setitem(*args)
rk_real_setitem = _redking.rk_real_setitem
class rk_realp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rk_realp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rk_realp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _redking.new_rk_realp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _redking.delete_rk_realp
    __del__ = lambda self : None;
    def assign(self, *args): return _redking.rk_realp_assign(self, *args)
    def value(self): return _redking.rk_realp_value(self)
    def cast(self): return _redking.rk_realp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _redking.rk_realp_frompointer
    if _newclass:frompointer = staticmethod(_redking.rk_realp_frompointer)
rk_realp_swigregister = _redking.rk_realp_swigregister
rk_realp_swigregister(rk_realp)

def rk_realp_frompointer(*args):
  return _redking.rk_realp_frompointer(*args)
rk_realp_frompointer = _redking.rk_realp_frompointer

# This file is compatible with both classic and new-style classes.


